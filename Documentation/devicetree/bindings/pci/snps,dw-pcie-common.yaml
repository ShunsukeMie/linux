# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
%YAML 1.2
---
$id: http://devicetree.org/schemas/pci/snps,dw-pcie-common.yaml#
$schema: http://devicetree.org/meta-schemas/core.yaml#

title: Synopsys DWC PCIe RP/EP controller

maintainers:
  - Jingoo Han <jingoohan1@gmail.com>
  - Gustavo Pimentel <gustavo.pimentel@synopsys.com>

description:
  Generic Synopsys DesignWare PCIe Root Port and Endpoint controller
  properties.

select: false

properties:
  reg:
    description:
      DWC PCIe CSR space is normally accessed over the dedicated Data Bus
      Interface - DBI. In accordance with the reference manual the register
      configuration space belongs to the Configuration-Dependent Module (CDM)
      and is split up into several sub-parts Standard PCIe configuration
      space, Port Logic Registers (PL), Shadow Config-space Registers,
      iATU/eDMA registers. The particular sub-space is selected by the
      CDM/ELBI (dbi_cs) and CS2 (dbi_cs2) signals (selector bits). Such
      configuration provides a flexible interface for the system engineers to
      either map the particular space at a desired MMIO address or just leave
      them in a contiguous memory space if pure Native or AXI Bridge DBI access
      is selected. Note the PCIe CFG-space, PL and Shadow registers are
      specific for each activated function, while the rest of the sub-spaces
      are common for all of them (if there are more than one).
    minItems: 2
    maxItems: 6

  reg-names:
    minItems: 2
    maxItems: 6

  interrupts:
    description:
      There are two main sub-blocks which are normally capable of
      generating interrupts. It's System Information Interface and MSI
      interface. While the former one has some common for the Host and
      Endpoint controllers IRQ-signals, the later interface is obviously
      Root Complex specific since it's responsible for the incoming MSI
      messages signalling. The System Information IRQ signals are mainly
      responsible for reporting the generic PCIe hierarchy and Root
      Complex events like VPD IO request, general AER, PME, Hot-plug, link
      bandwidth change, link equalization request, INTx asserted/deasserted
      Message detection, embedded DMA Tx/Rx/Error.
    minItems: 1
    maxItems: 26

  interrupt-names:
    minItems: 1
    maxItems: 26

  phys:
    description:
      There can be up to the number of possible lanes PHYs specified.
      Obviously each specified PHY is supposed to be able to work in the
      PCIe mode with a speed implied by the DWC PCIe controller it is
      attached to.
    minItems: 1
    maxItems: 16

  phy-names:
    minItems: 1
    maxItems: 16
    items:
      pattern: '^pcie([0-9]+|-?phy[0-9]*)?$'

  reset-gpio:
    deprecated: true
    description:
      Reference to the GPIO-controlled PERST# signal. It is used to reset all
      the peripheral devices available on the PCIe bus.
    maxItems: 1

  reset-gpios:
    description:
      Reference to the GPIO-controlled PERST# signal. It is used to reset all
      the peripheral devices available on the PCIe bus.
    maxItems: 1

  max-link-speed:
    maximum: 5

  num-lanes:
    description:
      Number of PCIe link lanes to use. Can be omitted should the already
      brought up link is supposed to be preserved.
    maximum: 16

  num-ob-windows:
    $ref: /schemas/types.yaml#/definitions/uint32
    deprecated: true
    description:
      Number of outbound address translation windows. This parameter can be
      auto-detected based on the iATU memory writability. So there is no
      point in having a dedicated DT-property for it.
    maximum: 256

  num-ib-windows:
    $ref: /schemas/types.yaml#/definitions/uint32
    deprecated: true
    description:
      Number of inbound address translation windows. In the same way as
      for the outbound AT windows, this parameter can be auto-detected based
      on the iATU memory writability. There is no point having a dedicated
      DT-property for it either.
    maximum: 256

  num-viewport:
    $ref: /schemas/types.yaml#/definitions/uint32
    deprecated: true
    description:
      Number of outbound view ports configured in hardware. It's the same as
      the number of outbound AT windows.
    maximum: 256

  snps,enable-cdm-check:
    $ref: /schemas/types.yaml#/definitions/flag
    description:
      Enable automatic checking of CDM (Configuration Dependent Module)
      registers for data corruption. CDM registers include standard PCIe
      configuration space registers, Port Logic registers, DMA and iATU
      registers. This feature has been available since DWC PCIe v4.80a.

additionalProperties: true

definitions:
  reg-names:
    description:
      CSR space names common for the DWC PCIe Root Port and Endpoint
      controllers.
    oneOf:
      - description:
          Basic DWC PCIe controller configuration-space accessible over
          the DBI interface. This memory space is either activated with
          CDM/ELBI = 0 and CS2 = 0 or is a contiguous memory region
          with all spaces. Note iATU/eDMA CSRs are indirectly accessible
          via the PL viewports on the DWC PCIe controllers older than
          v4.80a.
        const: dbi
      - description:
          Shadow DWC PCIe config-space registers. This space is selected
          by setting CDM/ELBI = 0 and CS2 = 1. This is an intermix of
          the PCI-SIG PCIe CFG-space with the shadow registers for some
          PCI Header space, PCI Standard and Extended Structures. It's
          mainly relevant for the end-point controller configuration,
          but still there are some shadow registers available for the
          Root Port mode too.
        const: dbi2
      - description:
          External Local Bus registers. It's an application-dependent
          registers normally defined by the platform engineers. The space
          can be selected by setting CDM/ELBI = 1 and CS2 = 0 wires or can
          be accessed over some platform-specific means (for instance
          as a part of a system controller).
        enum: [ elbi, app ]
      - description:
          iATU/eDMA registers common for all device functions. It's an
          unrolled memory space with the internal Address Translation
          Unit and Enhanced DMA, which is selected by setting CDM/ELBI = 1
          and CS2 = 1. For IP-core releases prior v4.80a, these registers
          have been programmed via an indirect addressing scheme using a
          set of viewport CSRs mapped into the PL space. Note iATU is
          normally mapped to the 0x0 address of this region, while eDMA
          is available at 0x80000 base address.
        const: atu
      - description:
          Platform-specific eDMA registers. Some platforms may have eDMA
          CSRs mapped in a non-standard base address. The registers offset
          can be changed or the MS/LS-bits of the address can be attached
          in an additional RTL block before the MEM-IO transactions reach
          the DW PCIe slave interface.
        const: dma
      - description:
          PHY/PCS configuration registers. Some platforms can have the
          PCS and PHY CSRs accessible over a dedicated memory mapped
          region, but mainly these registers are indirectly accessible
          either by means of the embedded PHY viewport schema or by some
          platform-specific method.
        const: phy

  interrupt-names:
    description:
      IRQ signal names common for the DWC PCIe Root Port and Endpoint
      controllers.
    oneOf:
      - description:
          Controller request to read or write virtual product data
          from/to the VPD capability registers.
        const: vpd
      - description:
          Link Equalization Request flag is set in the Link Status 2
          register (applicable if the corresponding IRQ is enabled in
          the Link Control 3 register).
        const: l_eq
      - description:
          Indicates that the eDMA Tx/Rx transfer is complete or that an
          error has occurred on the corresponding channel. eDMA can have
          eight Tx (Write) and Rx (Read) eDMA channels thus supporting up
          to 16 IRQ signals all together. Write eDMA channels shall go
          first in the ordered row as per default edma_int[*] bus setup.
        pattern: '^dma([0-9]|1[0-5])?$'
      - description:
          PCIe protocol correctable error or a Data Path protection
          correctable error is detected by the automotive/safety
          feature.
        const: sft_ce
      - description:
          Indicates that the internal safety mechanism detected and
          uncorrectable error.
        const: sft_ue

...
